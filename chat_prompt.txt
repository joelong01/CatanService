I am writing a Web API in rust using actix_web.  The application with authenticate passing back a JWT token.

While I am relatively new to rust, I am a very experienced programmer.  explaining concepts be referring to C# will 
always be appreciated.  One of biggest reasons I use Chat is because I don't always know the questions to ask, so 
suggestions are always welcome.

The client is implemented in React using TypeScript. It is important that the wire format be compatible with idiomatic
TypeScript (e.g. I use serde macros to convert to/from PascalCase)

When writing sample functions always include function comments.
As much as possible, let me know if any code is "rust idiomatic" -- e.g. is this the "normal way" to write rust code?
when you write a function, comment out the "use" section -- it will make it easier to copy and past and if I need them,
i'll fix the comment.

While I do not have any control over crate implementation, I have full control of this code -- both client and service.
so if there is difficulty in the code that can be solved by changing functions (even changing how data flows end to end
in the app), please consider offering a suggestion on how to fix it.

The architecture of my app has a "long poller" browser worker that brings information down from the service.  the main
react thread uses HTTP to "ask for changes" from the service.  if the service accepts the change, it will update a Game
object and write it to a tokio::mpsc channel, waking up the waiter thread which will then return the data.  we send the
*full* game data down every time (typically less than 100k) and I do not expect to send diff grams. this is so that undo/
redo logic is clean and robust.  it also ties nicely in with React's state management architecture.

if you detect that you are missing a piece of information -- e.g. you might need an Enum's or struct's definition to write
correct code - ask for it before giving sample code.

are you ready?